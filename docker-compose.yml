version: '3.8'

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .                   # Корневой контекст монорепозитория
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    volumes:
      - ./backend:/app/backend      # Монтируем исходники backend с хоста
      # Если хотите, чтобы node_modules использовались из образа, можно не монтировать их
      # Или используйте отдельный именованный volume для node_modules:
      # - backend_node_modules:/app/backend/node_modules
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    ports:
      - "5000:5000"
    command: pnpm run dev

  frontend:
    build:
      context: .                   # Корневой контекст монорепозитория
      dockerfile: frontend/Dockerfile
    restart: unless-stopped
    volumes:
      - ./frontend:/app/frontend    # Монтируем исходники фронтенда с хоста
      # Аналогично, можно использовать volume для node_modules, если не хотите перезаписывать установленные зависимости
      # - frontend_node_modules:/app/frontend/node_modules
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - app_network
    ports:
      - "3000:3000"
    command: pnpm run dev

volumes:
  postgres_data:
  # При использовании именованных volume для node_modules:
  # backend_node_modules:
  # frontend_node_modules:

networks:
  app_network:
    driver: bridge
